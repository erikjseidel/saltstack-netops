{"included": [{"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_bgp_neighbors[normal]", "teardown": {"duration": 7.891654968261719e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00034999847412109375, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 12, "duration": 0.0007789134979248047, "outcome": "error"}, "type": "test", "id": 1}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_interfaces_ip[normal]", "teardown": {"duration": 7.891654968261719e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003440380096435547, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 18, "duration": 0.0007669925689697266, "outcome": "error"}, "type": "test", "id": 2}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_route_to[no_test_case_found]", "teardown": {"duration": 6.389617919921875e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003509521484375, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 14, "duration": 0.0007658004760742188, "outcome": "error"}, "type": "test", "id": 3}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_network_instances[no_test_case_found]", "teardown": {"duration": 7.009506225585938e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00030493736267089844, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 9, "duration": 0.0006799697875976562, "outcome": "error"}, "type": "test", "id": 4}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_probes_config[no_test_case_found]", "teardown": {"duration": 6.699562072753906e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00032901763916015625, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 4, "duration": 0.0007250308990478516, "outcome": "error"}, "type": "test", "id": 5}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_ntp_servers[no_test_case_found]", "teardown": {"duration": 6.699562072753906e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.018024921417236328, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 0, "duration": 0.036116838455200195, "outcome": "error"}, "type": "test", "id": 6}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_interfaces_counters[normal]", "teardown": {"duration": 7.009506225585938e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003581047058105469, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 11, "duration": 0.0007863044738769531, "outcome": "error"}, "type": "test", "id": 7}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_is_alive[no_test_case_found]", "teardown": {"duration": 6.29425048828125e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.000347137451171875, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 20, "duration": 0.0007572174072265625, "outcome": "error"}, "type": "test", "id": 8}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_bgp_config[no_test_case_found]", "teardown": {"duration": 6.4849853515625e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003609657287597656, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 17, "duration": 0.0007867813110351562, "outcome": "error"}, "type": "test", "id": 9}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_probes_results[no_test_case_found]", "teardown": {"duration": 7.009506225585938e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003421306610107422, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 22, "duration": 0.0007543563842773438, "outcome": "error"}, "type": "test", "id": 10}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_ping[normal]", "teardown": {"duration": 7.104873657226562e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00030303001403808594, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 24, "duration": 0.0006771087646484375, "outcome": "error"}, "type": "test", "id": 11}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_mac_address_table[no_test_case_found]", "teardown": {"duration": 6.794929504394531e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003650188446044922, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 13, "duration": 0.0007979869842529297, "outcome": "error"}, "type": "test", "id": 12}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_lldp_neighbors_detail[no_test_case_found]", "teardown": {"duration": 6.604194641113281e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003387928009033203, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 5, "duration": 0.0007436275482177734, "outcome": "error"}, "type": "test", "id": 13}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_ntp_peers[normal]", "teardown": {"duration": 6.29425048828125e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00030994415283203125, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 6, "duration": 0.000682830810546875, "outcome": "error"}, "type": "test", "id": 14}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_environment[normal]", "teardown": {"duration": 6.699562072753906e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00041294097900390625, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 25, "duration": 0.0008928775787353516, "outcome": "error"}, "type": "test", "id": 15}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_arp_table[normal]", "teardown": {"duration": 6.890296936035156e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.000308990478515625, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 1, "duration": 0.0006868839263916016, "outcome": "error"}, "type": "test", "id": 16}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_users[normal]", "teardown": {"duration": 6.794929504394531e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00035500526428222656, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 19, "duration": 0.0007779598236083984, "outcome": "error"}, "type": "test", "id": 17}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_traceroute[no_test_case_found]", "teardown": {"duration": 6.818771362304688e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003399848937988281, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 21, "duration": 0.0007481575012207031, "outcome": "error"}, "type": "test", "id": 18}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_config[no_test_case_found]", "teardown": {"duration": 7.390975952148438e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003540515899658203, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 26, "duration": 0.000782012939453125, "outcome": "error"}, "type": "test", "id": 19}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_interfaces[normal]", "teardown": {"duration": 6.604194641113281e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00030493736267089844, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 2, "duration": 0.0006759166717529297, "outcome": "error"}, "type": "test", "id": 20}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_optics[no_test_case_found]", "teardown": {"duration": 7.200241088867188e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003371238708496094, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 10, "duration": 0.0007462501525878906, "outcome": "error"}, "type": "test", "id": 21}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_snmp_information[normal]", "teardown": {"duration": 6.985664367675781e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003209114074707031, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 27, "duration": 0.0007116794586181641, "outcome": "error"}, "type": "test", "id": 22}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_ntp_stats[normal]", "teardown": {"duration": 6.699562072753906e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0004379749298095703, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 8, "duration": 0.0009429454803466797, "outcome": "error"}, "type": "test", "id": 23}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_bgp_neighbors_detail[no_test_case_found]", "teardown": {"duration": 7.104873657226562e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.000370025634765625, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 16, "duration": 0.0008111000061035156, "outcome": "error"}, "type": "test", "id": 24}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_method_signatures", "teardown": {"duration": 0.0005640983581542969, "outcome": "error", "name": "teardown", "longrepr": "def fin():\n>       request.cls.device.close()\n\ntest/unit/conftest.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <conftest.PatchedVyOSDriver object at 0x1023a0e90>\n\n    def close(self):\n>     self._device.disconnect()\nE     AttributeError: 'NoneType' object has no attribute 'disconnect'\n\nnapalm_vyos/vyos.py:107: AttributeError"}, "setup": {"duration": 0.0002930164337158203, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 28, "duration": 0.0011501312255859375, "outcome": "error"}, "type": "test", "id": 25}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_firewall_policies[no_test_case_found]", "teardown": {"duration": 6.604194641113281e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00035119056701660156, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 3, "duration": 0.0007684230804443359, "outcome": "error"}, "type": "test", "id": 26}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_lldp_neighbors[no_test_case_found]", "teardown": {"duration": 7.700920104980469e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.0003180503845214844, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 7, "duration": 0.0007131099700927734, "outcome": "error"}, "type": "test", "id": 27}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_facts[normal]", "teardown": {"duration": 7.200241088867188e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00032901763916015625, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 15, "duration": 0.0007300376892089844, "outcome": "error"}, "type": "test", "id": 28}, {"attributes": {"name": "test/unit/test_getters.py::TestGetter::()::test_get_config_filtered[no_test_case_found]", "teardown": {"duration": 6.914138793945312e-05, "outcome": "passed", "name": "teardown"}, "setup": {"duration": 0.00035691261291503906, "outcome": "error", "name": "setup", "longrepr": "request = <SubRequest 'set_device_parameters' for <Function 'test_get_ntp_servers[no_test_case_found]'>>\n\n    @pytest.fixture(scope='class')\n    def set_device_parameters(request):\n        \"\"\"Set up the class.\"\"\"\n        def fin():\n            request.cls.device.close()\n        request.addfinalizer(fin)\n    \n        request.cls.driver = vyos.VyOSDriver\n        request.cls.patched_driver = PatchedVyOSDriver\n        request.cls.vendor = 'vyos'\n>       parent_conftest.set_device_parameters(request)\n\ntest/unit/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/napalm_base/test/conftest.py:29: in set_device_parameters\n    request.cls.device.open()\nnapalm_vyos/vyos.py:102: in open\n    **self.netmiko_optional_args)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/ssh_dispatcher.py:96: in ConnectHandler\n    return ConnectionClass(*args, **kwargs)\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:89: in __init__\n    self.establish_connection()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <netmiko.vyos.vyos_ssh.VyOSSSH object at 0x1023a0f10>, width = None, height = None\n\n    def establish_connection(self, width=None, height=None):\n        \"\"\"\n            Establish SSH connection to the network device\n    \n            Timeout will generate a NetMikoTimeoutException\n            Authentication failure will generate a NetMikoAuthenticationException\n    \n            width and height are needed for Fortinet paging setting.\n            \"\"\"\n        if self.protocol == 'telnet':\n            self.remote_conn = telnetlib.Telnet(self.host, port=self.port, timeout=self.timeout)\n            self.telnet_login()\n        elif self.protocol == 'ssh':\n    \n            # Convert Paramiko connection parameters to a dictionary\n            ssh_connect_params = self._connect_params_dict()\n    \n            # Check if using SSH 'config' file mainly for SSH proxy support\n            if self.ssh_config_file:\n                self._use_ssh_config(ssh_connect_params)\n    \n            # Create instance of SSHClient object\n            self.remote_conn_pre = paramiko.SSHClient()\n    \n            # Load host_keys for better SSH security\n            if self.system_host_keys:\n                self.remote_conn_pre.load_system_host_keys()\n            if self.alt_host_keys and path.isfile(self.alt_key_file):\n                self.remote_conn_pre.load_host_keys(self.alt_key_file)\n    \n            # Default is to automatically add untrusted hosts (make sure appropriate for your env)\n            self.remote_conn_pre.set_missing_host_key_policy(self.key_policy)\n    \n            # initiate SSH connection\n            try:\n                self.remote_conn_pre.connect(**ssh_connect_params)\n            except socket.error:\n                msg = \"Connection to device timed-out: {device_type} {ip}:{port}\".format(\n                    device_type=self.device_type, ip=self.host, port=self.port)\n>               raise NetMikoTimeoutException(msg)\nE               NetMikoTimeoutException: Connection to device timed-out: vyos 127.0.0.1:12443\n\n../../../.virtualenvs/napalm-vyos/lib/python2.7/site-packages/netmiko/base_connection.py:396: NetMikoTimeoutException"}, "run_index": 23, "duration": 0.0007829666137695312, "outcome": "error"}, "type": "test", "id": 29}], "data": [{"relationships": {"tests": {"data": [{"type": "test", "id": 1}, {"type": "test", "id": 2}, {"type": "test", "id": 3}, {"type": "test", "id": 4}, {"type": "test", "id": 5}, {"type": "test", "id": 6}, {"type": "test", "id": 7}, {"type": "test", "id": 8}, {"type": "test", "id": 9}, {"type": "test", "id": 10}, {"type": "test", "id": 11}, {"type": "test", "id": 12}, {"type": "test", "id": 13}, {"type": "test", "id": 14}, {"type": "test", "id": 15}, {"type": "test", "id": 16}, {"type": "test", "id": 17}, {"type": "test", "id": 18}, {"type": "test", "id": 19}, {"type": "test", "id": 20}, {"type": "test", "id": 21}, {"type": "test", "id": 22}, {"type": "test", "id": 23}, {"type": "test", "id": 24}, {"type": "test", "id": 25}, {"type": "test", "id": 26}, {"type": "test", "id": 27}, {"type": "test", "id": 28}, {"type": "test", "id": 29}]}}, "attributes": {"environment": {"Python": "2.7.12", "Platform": "Darwin-16.1.0-x86_64-i386-64bit"}, "created_at": "2016-12-11 12:58:03.013901", "summary": {"duration": 2.7671408653259277, "num_tests": 29, "error": 30}}, "type": "report", "id": 1}]}